{"ast":null,"code":"import _slicedToArray from \"C:/Users/HP/Desktop/React-Aypin Automat/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport ownerDocument from 'dom-helpers/ownerDocument';\nimport canUseDOM from 'dom-helpers/canUseDOM';\nimport { useState, useEffect } from 'react';\nimport useWindow from './useWindow';\nexport var resolveContainerRef = function resolveContainerRef(ref, document) {\n  if (!canUseDOM) return null;\n  if (ref == null) return (document || ownerDocument()).body;\n  if (typeof ref === 'function') ref = ref();\n  if (ref && 'current' in ref) ref = ref.current;\n  if (ref && ('nodeType' in ref || ref.getBoundingClientRect)) return ref;\n  return null;\n};\nexport default function useWaitForDOMRef(ref, onResolved) {\n  var window = useWindow();\n\n  var _useState = useState(function () {\n    return resolveContainerRef(ref, window == null ? void 0 : window.document);\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      resolvedRef = _useState2[0],\n      setRef = _useState2[1];\n\n  if (!resolvedRef) {\n    var earlyRef = resolveContainerRef(ref);\n    if (earlyRef) setRef(earlyRef);\n  }\n\n  useEffect(function () {\n    if (onResolved && resolvedRef) {\n      onResolved(resolvedRef);\n    }\n  }, [onResolved, resolvedRef]);\n  useEffect(function () {\n    var nextRef = resolveContainerRef(ref);\n\n    if (nextRef !== resolvedRef) {\n      setRef(nextRef);\n    }\n  }, [ref, resolvedRef]);\n  return resolvedRef;\n}","map":{"version":3,"sources":["C:/Users/HP/Desktop/React-Aypin Automat/node_modules/react-bootstrap/node_modules/@restart/ui/esm/useWaitForDOMRef.js"],"names":["ownerDocument","canUseDOM","useState","useEffect","useWindow","resolveContainerRef","ref","document","body","current","getBoundingClientRect","useWaitForDOMRef","onResolved","window","resolvedRef","setRef","earlyRef","nextRef"],"mappings":";AAAA,OAAOA,aAAP,MAA0B,2BAA1B;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAO,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,GAAD,EAAMC,QAAN,EAAmB;AACpD,MAAI,CAACN,SAAL,EAAgB,OAAO,IAAP;AAChB,MAAIK,GAAG,IAAI,IAAX,EAAiB,OAAO,CAACC,QAAQ,IAAIP,aAAa,EAA1B,EAA8BQ,IAArC;AACjB,MAAI,OAAOF,GAAP,KAAe,UAAnB,EAA+BA,GAAG,GAAGA,GAAG,EAAT;AAC/B,MAAIA,GAAG,IAAI,aAAaA,GAAxB,EAA6BA,GAAG,GAAGA,GAAG,CAACG,OAAV;AAC7B,MAAIH,GAAG,KAAK,cAAcA,GAAd,IAAqBA,GAAG,CAACI,qBAA9B,CAAP,EAA6D,OAAOJ,GAAP;AAC7D,SAAO,IAAP;AACD,CAPM;AAQP,eAAe,SAASK,gBAAT,CAA0BL,GAA1B,EAA+BM,UAA/B,EAA2C;AACxD,MAAMC,MAAM,GAAGT,SAAS,EAAxB;;AACA,kBAA8BF,QAAQ,CAAC;AAAA,WAAMG,mBAAmB,CAACC,GAAD,EAAMO,MAAM,IAAI,IAAV,GAAiB,KAAK,CAAtB,GAA0BA,MAAM,CAACN,QAAvC,CAAzB;AAAA,GAAD,CAAtC;AAAA;AAAA,MAAOO,WAAP;AAAA,MAAoBC,MAApB;;AAEA,MAAI,CAACD,WAAL,EAAkB;AAChB,QAAME,QAAQ,GAAGX,mBAAmB,CAACC,GAAD,CAApC;AACA,QAAIU,QAAJ,EAAcD,MAAM,CAACC,QAAD,CAAN;AACf;;AAEDb,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIS,UAAU,IAAIE,WAAlB,EAA+B;AAC7BF,MAAAA,UAAU,CAACE,WAAD,CAAV;AACD;AACF,GAJQ,EAIN,CAACF,UAAD,EAAaE,WAAb,CAJM,CAAT;AAKAX,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMc,OAAO,GAAGZ,mBAAmB,CAACC,GAAD,CAAnC;;AAEA,QAAIW,OAAO,KAAKH,WAAhB,EAA6B;AAC3BC,MAAAA,MAAM,CAACE,OAAD,CAAN;AACD;AACF,GANQ,EAMN,CAACX,GAAD,EAAMQ,WAAN,CANM,CAAT;AAOA,SAAOA,WAAP;AACD","sourcesContent":["import ownerDocument from 'dom-helpers/ownerDocument';\nimport canUseDOM from 'dom-helpers/canUseDOM';\nimport { useState, useEffect } from 'react';\nimport useWindow from './useWindow';\nexport const resolveContainerRef = (ref, document) => {\n  if (!canUseDOM) return null;\n  if (ref == null) return (document || ownerDocument()).body;\n  if (typeof ref === 'function') ref = ref();\n  if (ref && 'current' in ref) ref = ref.current;\n  if (ref && ('nodeType' in ref || ref.getBoundingClientRect)) return ref;\n  return null;\n};\nexport default function useWaitForDOMRef(ref, onResolved) {\n  const window = useWindow();\n  const [resolvedRef, setRef] = useState(() => resolveContainerRef(ref, window == null ? void 0 : window.document));\n\n  if (!resolvedRef) {\n    const earlyRef = resolveContainerRef(ref);\n    if (earlyRef) setRef(earlyRef);\n  }\n\n  useEffect(() => {\n    if (onResolved && resolvedRef) {\n      onResolved(resolvedRef);\n    }\n  }, [onResolved, resolvedRef]);\n  useEffect(() => {\n    const nextRef = resolveContainerRef(ref);\n\n    if (nextRef !== resolvedRef) {\n      setRef(nextRef);\n    }\n  }, [ref, resolvedRef]);\n  return resolvedRef;\n}"]},"metadata":{},"sourceType":"module"}